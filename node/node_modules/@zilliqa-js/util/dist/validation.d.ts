import BN from 'bn.js';
import Long from 'long';
export declare const isAddress: (address: string) => boolean;
export declare const isBech32: (raw: string) => boolean;
export declare const isBase58: (raw: string) => boolean;
export declare const isPrivateKey: (privateKey: string) => boolean;
export declare const isPubKey: (pubKey: string) => boolean;
export declare const isSignature: (sig: string) => boolean;
export declare const isByteString: (str: string, len: number) => boolean;
export declare const isNumber: (x: unknown) => x is number;
export declare const isBN: (x: unknown) => x is BN;
export declare const isLong: (x: unknown) => x is Long.Long;
export declare const isString: (x: unknown) => x is string;
export declare const isPlainObject: (x: unknown) => x is {
    [key: string]: any;
};
declare const PRAGMA_REQUIRED = "@@ZJS_REQUIRED@@";
export interface Validator extends Function {
    required?: typeof PRAGMA_REQUIRED;
}
export declare const required: <T extends Function>(fn: T) => Validator;
export declare const matchesObject: <T extends object>(x: unknown, test: {
    [key: string]: Validator[];
}) => x is T;
export {};
//# sourceMappingURL=validation.d.ts.map