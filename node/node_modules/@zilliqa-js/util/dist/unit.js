"use strict";
//  Copyright (C) 2018 Zilliqa
//
//  This file is part of Zilliqa-Javascript-Library.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * Adapted from https://github.com/ethjs/ethjs-unit/blob/master/src/index.js
 */
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var Units;
(function (Units) {
    Units["Zil"] = "zil";
    Units["Li"] = "li";
    Units["Qa"] = "qa";
})(Units = exports.Units || (exports.Units = {}));
var DEFAULT_OPTIONS = {
    pad: false,
};
var unitMap = new Map([
    [Units.Qa, '1'],
    [Units.Li, '1000000'],
    [Units.Zil, '1000000000000'],
]);
var numToStr = function (input) {
    if (typeof input === 'string') {
        if (!input.match(/^-?[0-9.]+$/)) {
            throw new Error("while converting number to string, invalid number value '" + input + "', should be a number matching (^-?[0-9.]+).");
        }
        return input;
    }
    else if (typeof input === 'number') {
        return String(input);
    }
    else if (bn_js_1.default.isBN(input)) {
        return input.toString(10);
    }
    throw new Error("while converting number to string, invalid number value '" + input + "' type " + typeof input + ".");
};
exports.fromQa = function (qa, unit, options) {
    if (options === void 0) { options = DEFAULT_OPTIONS; }
    if (unit === 'qa') {
        return qa.toString(10);
    }
    var baseStr = unitMap.get(unit);
    if (!baseStr) {
        throw new Error("No unit of type " + unit + " exists.");
    }
    var base = new bn_js_1.default(baseStr, 10);
    var baseNumDecimals = baseStr.length - 1;
    var fraction = qa
        .abs()
        .mod(base)
        .toString(10);
    // prepend 0s to the fraction half
    while (fraction.length < baseNumDecimals) {
        fraction = "0" + fraction;
    }
    if (!options.pad) {
        fraction = (fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
    }
    var whole = qa.div(base).toString(10);
    return fraction === '0' ? "" + whole : whole + "." + fraction;
};
exports.toQa = function (input, unit) {
    var inputStr = numToStr(input);
    var baseStr = unitMap.get(unit);
    if (!baseStr) {
        throw new Error("No unit of type " + unit + " exists.");
    }
    var baseNumDecimals = baseStr.length - 1;
    var base = new bn_js_1.default(baseStr, 10);
    // Is it negative?
    var isNegative = inputStr.substring(0, 1) === '-';
    if (isNegative) {
        inputStr = inputStr.substring(1);
    }
    if (inputStr === '.') {
        throw new Error("Cannot convert " + inputStr + " to Qa.");
    }
    // Split it into a whole and fractional part
    var comps = inputStr.split('.'); // eslint-disable-line
    if (comps.length > 2) {
        throw new Error("Cannot convert " + inputStr + " to Qa.");
    }
    var _a = tslib_1.__read(comps, 2), whole = _a[0], fraction = _a[1];
    if (!whole) {
        whole = '0';
    }
    if (!fraction) {
        fraction = '0';
    }
    if (fraction.length > baseNumDecimals) {
        throw new Error("Cannot convert " + inputStr + " to Qa.");
    }
    while (fraction.length < baseNumDecimals) {
        fraction += '0';
    }
    var wholeBN = new bn_js_1.default(whole);
    var fractionBN = new bn_js_1.default(fraction);
    var wei = wholeBN.mul(base).add(fractionBN); // eslint-disable-line
    if (isNegative) {
        wei = wei.neg();
    }
    return new bn_js_1.default(wei.toString(10), 10);
};
//# sourceMappingURL=unit.js.map