/**
 * intToHexArray
 *
 * @param {number} int - the number to be converted to hex
 * @param {number)} size - the desired width of the hex value. will pad.
 *
 * @returns {string[]}
 */
export declare const intToHexArray: (int: number, size: number) => string[];
/**
 * intToByteArray
 *
 * Converts a number to Uint8Array
 *
 * @param {number} num
 * @param {number} size
 *
 * @returns {Uint8Array}
 */
export declare const intToByteArray: (num: number, size: number) => Uint8Array;
/**
 * hexToByteArray
 *
 * Convers a hex string to a Uint8Array
 *
 * @param {string} hex
 * @returns {Uint8Array}
 */
export declare const hexToByteArray: (hex: string) => Uint8Array;
/**
 * hexToIntArray
 *
 * @param {string} hex
 * @returns {number[]}
 */
export declare const hexToIntArray: (hex: string) => number[];
/**
 * pack
 *
 * Takes two 16-bit integers and combines them. Used to compute version.
 *
 * @param {number} a
 * @param {number} b
 *
 * @returns {number} - a 32-bit number
 */
export declare const pack: (a: number, b: number) => number;
/**
 * compareBytes
 *
 * A constant time HMAC comparison function.
 *
 * @param {string} a
 * @param {string} b
 * @returns {boolean}
 */
export declare const isEqual: (a: string, b: string) => boolean;
/**
 * isHex
 *
 * @param {string} str - string to be tested
 * @returns {boolean}
 */
export declare const isHex: (str: string) => boolean;
//# sourceMappingURL=bytes.d.ts.map