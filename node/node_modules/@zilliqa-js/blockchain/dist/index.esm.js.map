{"version":3,"file":"index.esm.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/util.ts","../src/chain.ts","../src/network.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { TxParams } from '@zilliqa-js/account';\nimport {\n  RPCResponse,\n  TransactionError,\n  TransactionObj,\n} from '@zilliqa-js/core';\nimport { toChecksumAddress } from '@zilliqa-js/crypto';\nimport { BN, Long } from '@zilliqa-js/util';\n\nexport function toTxParams(\n  response: RPCResponse<TransactionObj, never>,\n): TxParams {\n  const {\n    toAddr,\n    senderPubKey,\n    gasPrice,\n    gasLimit,\n    nonce,\n    amount,\n    receipt,\n    version,\n    code,\n    data,\n    ...rest\n  } = <TransactionObj>response.result;\n\n  const msg = receipt.errors\n    ? Object.keys(receipt.errors).reduce((acc, depth) => {\n        const errorMsgList = receipt.errors[depth].map(\n          (num: number) => TransactionError[num],\n        );\n        return { ...acc, [depth]: errorMsgList };\n      }, {})\n    : {};\n\n  return {\n    ...rest,\n    version: parseInt(version, 10),\n    toAddr: toChecksumAddress(toAddr),\n    pubKey: senderPubKey.replace('0x', ''),\n    gasPrice: new BN(gasPrice),\n    gasLimit: Long.fromString(gasLimit, 10),\n    amount: new BN(amount),\n    nonce: parseInt(nonce, 10),\n    code,\n    data,\n    receipt: {\n      ...receipt,\n      accepted: receipt.accepted,\n      errors: msg,\n      cumulative_gas: parseInt(receipt.cumulative_gas, 10),\n    },\n  };\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Transaction, util, Wallet } from '@zilliqa-js/account';\nimport { fromBech32Address } from '@zilliqa-js/crypto';\nimport { validation } from '@zilliqa-js/util';\nimport { ContractObj, Value } from '@zilliqa-js/contract';\nimport {\n  BlockchainInfo,\n  BlockList,\n  DsBlockObj,\n  GET_TX_ATTEMPTS,\n  TransactionStatusObj,\n  Provider,\n  RPCMethod,\n  RPCResponse,\n  ShardingStructure,\n  sign,\n  TransactionObj,\n  MinerInfo,\n  TxBlockObj,\n  TxList,\n  ZilliqaModule,\n} from '@zilliqa-js/core';\n\nimport { toTxParams } from './util';\n\nexport class Blockchain implements ZilliqaModule {\n  signer: Wallet;\n  provider: Provider;\n  pendingErrorMap: { [key: number]: string } = {\n    0: 'Transaction not found',\n    1: 'Pending - Dispatched',\n    2: 'Pending - Soft-confirmed (awaiting Tx block generation)',\n    4: 'Pending - Nonce is higher than expected',\n    5: 'Pending - Microblock gas limit exceeded',\n    6: 'Pending - Consensus failure in network',\n    3: 'Confirmed',\n    10: 'Rejected - Transaction caused math error',\n    11: 'Rejected - Scilla invocation error',\n    12: 'Rejected - Contract account initialization error',\n    13: 'Rejected - Invalid source account',\n    14: 'Rejected - Gas limit higher than shard gas limit',\n    15: 'Rejected - Unknown transaction type',\n    16: 'Rejected - Transaction sent to wrong shard',\n    17: 'Rejected - Contract & source account cross-shard issue',\n    18: 'Rejected - Code size exceeded limit',\n    19: 'Rejected - Transaction verification failed',\n    20: 'Rejected - Gas limit too low',\n    21: 'Rejected - Insufficient balance',\n    22: 'Rejected - Insufficient gas to invoke Scilla checker',\n    23: 'Rejected - Duplicate transaction exists',\n    24: 'Rejected - Transaction with same nonce but same/higher gas price exists',\n    25: 'Rejected - Invalid destination address',\n    26: 'Rejected - Failed to add contract account to state',\n    27: 'Rejected - Nonce is lower than expected',\n    255: 'Rejected - Internal error',\n  };\n\n  transactionStatusMap: { [key: number]: { [key: number]: string } } = {\n    0: { 0: 'Transaction not found', 1: ' Pending - Dispatched' },\n    1: {\n      2: 'Pending - Soft-confirmed (awaiting Tx block generation)',\n      4: 'Pending - Nonce is higher than expected',\n      5: 'Pending - Microblock gas limit exceeded',\n      6: 'Pending - Consensus failure in network',\n    },\n    2: {\n      3: 'Confirmed',\n      10: 'Rejected - Transaction caused math error',\n      11: 'Rejected - Scilla invocation error',\n      12: 'Rejected - Contract account initialization error',\n      13: 'Rejected - Invalid source account',\n      14: 'Rejected - Gas limit higher than shard gas limit',\n      15: 'Rejected - Unknown transaction type',\n      16: 'Rejected - Transaction sent to wrong shard',\n      17: 'Rejected - Contract & source account cross-shard issue',\n      18: 'Rejected - Code size exceeded limit',\n      19: 'Rejected - Transaction verification failed',\n      20: 'Rejected - Gas limit too low',\n      21: 'Rejected - Insufficient balance',\n      22: 'Rejected - Insufficient gas to invoke Scilla checker',\n      23: 'Rejected - Duplicate transaction exists',\n      24: 'Rejected - Transaction with higher gas price exists',\n      25: 'Rejected - Invalid destination address',\n      26: 'Rejected - Failed to add contract account to state',\n      27: 'Rejected - Nonce is lower than expected',\n      255: 'Rejected - Internal error',\n    },\n  };\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.provider.middleware.request.use(\n      util.formatOutgoingTx,\n      RPCMethod.CreateTransaction,\n    );\n    this.signer = signer;\n  }\n\n  /**\n   * getBlockChainInfo\n   *\n   * @returns {Promise<RPCResponse<BlockchainInfo, string>>}\n   */\n  getBlockChainInfo(): Promise<RPCResponse<BlockchainInfo, string>> {\n    return this.provider.send(RPCMethod.GetBlockchainInfo);\n  }\n\n  /**\n   * getShardingStructure\n   *\n   * @returns {Promise<RPCResponse<ShardingStructure, string>>}\n   */\n  getShardingStructure(): Promise<RPCResponse<ShardingStructure, string>> {\n    return this.provider.send(RPCMethod.GetShardingStructure);\n  }\n\n  /**\n   * getDSBlock\n   *\n   * Get details of a Directory Service block by block number.\n   *\n   * @param {number} blockNum\n   * @returns {Promise<RPCResponse<DsBlockObj, string>>}\n   */\n  getDSBlock(blockNum: number): Promise<RPCResponse<DsBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetDSBlock, blockNum.toString());\n  }\n\n  /**\n   * getLatestDSBlock\n   *\n   * Get details of the most recent Directory Service block.\n   *\n   * @returns {Promise<RPCResponse<DsBlockObj, string>>}\n   */\n  getLatestDSBlock(): Promise<RPCResponse<DsBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetLatestDSBlock);\n  }\n\n  /**\n   * getNumDSBlocks\n   *\n   * Gets the number of DS blocks that the network has processed.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getNumDSBlocks(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumDSBlocks);\n  }\n\n  /**\n   * getDSBlockRate\n   *\n   * Gets the average rate of DS blocks processed per second\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getDSBlockRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetDSBlockRate);\n  }\n\n  /**\n   * getDSBlockListing\n   *\n   * Get a paginated list of Directory Service blocks. Pass in page number as\n   * parameter. Returns a maxPages variable that specifies the max number of\n   * pages. 1 - latest blocks, maxPages - oldest blocks.\n   *\n   * @param {number} max\n   * @returns {Promise<RPCResponse<BlockList, string>>}\n   */\n  getDSBlockListing(max: number): Promise<RPCResponse<BlockList, string>> {\n    return this.provider.send(RPCMethod.DSBlockListing, max);\n  }\n\n  /**\n   * getTxBlock\n   *\n   * Get details of a Transaction block by block number.\n   *\n   * @param {number} blockNum\n   * @returns {Promise<RPCResponse<TxBlockObj, string>>}\n   */\n  getTxBlock(blockNum: number): Promise<RPCResponse<TxBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetTxBlock, blockNum.toString());\n  }\n\n  /**\n   * getLatestTxBlock\n   *\n   * Get details of the most recent Transaction block.\n   *\n   * @returns {Promise<RPCResponse<TxBlockObj, string>>}\n   */\n  getLatestTxBlock(): Promise<RPCResponse<TxBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetLatestTxBlock);\n  }\n\n  /**\n   * getNumTxBlocks\n   *\n   * Gets the total number of TxBlocks.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getNumTxBlocks(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxBlocks);\n  }\n\n  /**\n   * getTxBlockRate\n   *\n   * Gets the average number of Tx blocks per second.\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getTxBlockRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetTxBlockRate);\n  }\n\n  /**\n   * getTxBlockListing\n   *\n   * Get a paginated list of Transaction blocks. Takes a page number as\n   * parameter, where each page contains a list of 10 blocks (max). Returns\n   * a maxPages variable that specifies the max number of pages. 1 - latest\n   * blocks, maxPages - oldest blocks.\n   *\n   * @param {number} max\n   * @returns {Promise<RPCResponse<BlockList, string>>}\n   */\n  getTxBlockListing(max: number): Promise<RPCResponse<BlockList, string>> {\n    return this.provider.send(RPCMethod.TxBlockListing, max);\n  }\n\n  /**\n   * getNumTransactions\n   *\n   * Gets the number of transactions processed by the network so far.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getNumTransactions(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTransactions);\n  }\n\n  /**\n   * getTransactionRate\n   *\n   * Gets the number of transactions processed per second\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getTransactionRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetTransactionRate);\n  }\n\n  /**\n   * getCurrentMiniEpoch\n   *\n   * Gets the current Tx Epoch.\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getCurrentMiniEpoch(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetCurrentMiniEpoch);\n  }\n\n  /**\n   * getCurrentDSEpoch\n   *\n   * Gets the current DS Epoch.\n   *\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n  getCurrentDSEpoch(): Promise<RPCResponse<any, string>> {\n    return this.provider.send(RPCMethod.GetCurrentDSEpoch);\n  }\n\n  /**\n   * getPrevDifficulty\n   *\n   * Gets shard difficulty for previous PoW round\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getPrevDifficulty(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetPrevDifficulty);\n  }\n\n  /**\n   * getPrevDSDifficulty\n   *\n   * Gets DS difficulty for previous PoW round\n   *\n   * @returns {Promise<RPCResponse<number, string>>}\n   */\n  getPrevDSDifficulty(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetPrevDSDifficulty);\n  }\n\n  /**\n   * getTotalCoinSupply\n   *\n   * Returns the total supply (ZIL) of coins in the network.\n   */\n  getTotalCoinSupply(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetTotalCoinSupply);\n  }\n\n  /**\n   * getMinerInfo\n   *\n   * Returns the mining nodes (i.e., the members of the DS committee and shards) at the specified DS block.\n   *\n   * Notes:\n   * 1. Nodes owned by Zilliqa Research are omitted.\n   * 2. dscommittee has no size field since the DS committee size is fixed for a given chain.\n   * 3. For the Zilliqa Mainnet, this API is only available from DS block 5500 onwards.\n   *\n   */\n  getMinerInfo(dsBlockNumber: string): Promise<RPCResponse<MinerInfo, any>> {\n    return this.provider.send(RPCMethod.GetMinerInfo, dsBlockNumber);\n  }\n\n  /**\n   * createTransaction\n   *\n   * Creates a transaction and polls the lookup node for a transaction\n   * receipt. The transaction is considered to be lost if it is not confirmed\n   * within the timeout period.\n   *\n   * @param {Transaction} tx\n   * @param {number} maxAttempts - (optional) number of times to poll before timing out\n   * @param {number} number - (optional) interval in ms\n   * @returns {Promise<Transaction>} - the Transaction that has been signed and\n   * broadcasted to the network.\n   */\n  @sign\n  async createTransaction(\n    tx: Transaction,\n    maxAttempts: number = GET_TX_ATTEMPTS,\n    interval: number = 1000,\n    blockConfirm: boolean = false,\n  ): Promise<Transaction> {\n    try {\n      const response = await this.provider.send(RPCMethod.CreateTransaction, {\n        ...tx.txParams,\n        priority: tx.toDS,\n      });\n\n      if (response.error) {\n        throw response.error;\n      }\n      if (blockConfirm) {\n        return tx.blockConfirm(response.result.TranID, maxAttempts, interval);\n      }\n      return tx.confirm(response.result.TranID, maxAttempts, interval);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // used together with signed batch\n  // this method waits for each txn to confirm\n  // see @createBatchTransactionWithoutConfirm for transactions without confirmation\n  async createBatchTransaction(\n    signedTxList: Transaction[],\n    maxAttempts: number = GET_TX_ATTEMPTS,\n    interval: number = 1000,\n    blockConfirm: boolean = false,\n  ): Promise<Transaction[]> {\n    try {\n      let txParamsList = [];\n      for (const signedTx of signedTxList) {\n        if (signedTx.txParams.signature === undefined) {\n          throw new Error('The transaction is not signed.');\n        }\n        txParamsList.push({\n          ...signedTx.txParams,\n          priority: signedTx.toDS,\n        });\n      }\n\n      const response = await this.provider.sendBatch(\n        RPCMethod.CreateTransaction,\n        txParamsList,\n      );\n\n      if (response.error) {\n        throw response.error;\n      }\n\n      // retrieve batch result\n      let batchResults = [];\n      for (let i = 0; i < signedTxList.length; i++) {\n        const tx = signedTxList[i];\n        const txRes = response.batch_result[i];\n\n        if (blockConfirm) {\n          batchResults.push(\n            await tx.blockConfirm(txRes.result.TranID, maxAttempts, interval),\n          );\n        } else {\n          batchResults.push(\n            await tx.confirm(txRes.result.TranID, maxAttempts, interval),\n          );\n        }\n      }\n      return batchResults;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * createTransactionRaw\n   *\n   * Create a transaction by using a exist signed transaction payload\n   * This payload may come form some offline signing software like ledger\n   * Currently we haven't supported convert a singed transaction back to transaction param, so we won't perform\n   * confirm logic here, but there is another convenient way to do so, can refer examples/createTransactionRaw.js\n   *\n   * @param payload\n   */\n  async createTransactionRaw(payload: string): Promise<string> {\n    try {\n      const tx = JSON.parse(payload);\n      const response = await this.provider.send(\n        RPCMethod.CreateTransaction,\n        tx,\n      );\n      if (response.error) {\n        throw response.error;\n      }\n      return response.result.TranID;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  @sign\n  async createTransactionWithoutConfirm(tx: Transaction): Promise<Transaction> {\n    try {\n      const response = await this.provider.send(RPCMethod.CreateTransaction, {\n        ...tx.txParams,\n        priority: tx.toDS,\n      });\n      if (response.error) {\n        throw response.error;\n      }\n      tx.id = response.result.TranID;\n      return tx;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // used together with signed batch\n  async createBatchTransactionWithoutConfirm(\n    signedTxList: Transaction[],\n  ): Promise<Transaction[]> {\n    try {\n      let txParamsList = [];\n      for (let signedTx of signedTxList) {\n        if (signedTx.txParams.signature === undefined) {\n          throw new Error('The transaction is not signed.');\n        }\n        txParamsList.push({\n          ...signedTx.txParams,\n          priority: signedTx.toDS,\n        });\n      }\n\n      const response = await this.provider.sendBatch(\n        RPCMethod.CreateTransaction,\n        txParamsList,\n      );\n\n      if (response.error) {\n        throw response.error;\n      }\n\n      let batchResults = [];\n      for (let i = 0; i < signedTxList.length; i++) {\n        const tx = signedTxList[i];\n        const txRes = response.batch_result[i];\n        tx.id = txRes.result.TranID;\n        batchResults.push(tx);\n      }\n      return batchResults;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * getTransaction\n   *\n   * Retrieves a transaction from the blockchain by its hash. If the result\n   * contains an Error, a rejected Promise is returned with the erorr message.\n   * If it does not contained an error, but `receipt.success` is `false`, then\n   * a rejected Transaction instance is returned.\n   *\n   * @param {string} txHash\n   * @returns {Promise<Transaction>}\n   */\n  async getTransaction(txHash: string): Promise<Transaction> {\n    try {\n      const response = await this.provider.send<TransactionObj>(\n        RPCMethod.GetTransaction,\n        txHash,\n      );\n\n      if (response.error) {\n        return Promise.reject(response.error);\n      }\n\n      return response.result.receipt.success\n        ? Transaction.confirm(toTxParams(response), this.provider)\n        : Transaction.reject(toTxParams(response), this.provider);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * Returns the status of a specified transaction.\n   * This API is available from Zilliqa `V7.0.0` onwards and supports all transaction statuses\n   * (unconfirmed, confirmed, and rejected).\n   *\n   * @param txHash\n   * @returns {Promise<TransactionStatusObj>}\n   */\n  async getTransactionStatus(txHash: string): Promise<TransactionStatusObj> {\n    try {\n      const response = await this.provider.send<TransactionStatusObj>(\n        RPCMethod.GetTransactionStatus,\n        txHash,\n      );\n      if (response.error) {\n        return Promise.reject(response.error);\n      }\n\n      const modificationState = response.result.modificationState;\n      const status = response.result.status;\n      response.result.statusMessage = this.transactionStatusMap[\n        modificationState\n      ][status];\n      return response.result;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * getRecentTransactions\n   *\n   * Gets a list of recent transactions\n   *\n   * @returns {Promise<RPCResponse<TxList, never>>}\n   */\n  getRecentTransactions(): Promise<RPCResponse<TxList, never>> {\n    return this.provider.send(RPCMethod.GetRecentTransactions);\n  }\n\n  /**\n   * getTransactionsForTxBlock\n   *\n   * Gets all transactions for a given TxBlock, grouped by shard id\n   *\n   * @param {number} txBlock\n   * @returns {Promise<RPCResponse<string[][], string>>}\n   */\n  getTransactionsForTxBlock(\n    txBlock: number,\n  ): Promise<RPCResponse<string[][], string>> {\n    return this.provider.send(\n      RPCMethod.GetTransactionsForTxBlock,\n      txBlock.toString(),\n    );\n  }\n\n  /**\n   * getTxnBodiesForTxBlock\n   *\n   * @param {number} txBlock\n   * @returns { romise<RPCResponse<TransactionObj[], string>>}\n   */\n  getTxnBodiesForTxBlock(\n    txBlock: number,\n  ): Promise<RPCResponse<TransactionObj[], string>> {\n    return this.provider.send(\n      RPCMethod.GetTxnBodiesForTxBlock,\n      txBlock.toString(),\n    );\n  }\n\n  /**\n   * getNumTxnsTxEpoch\n   *\n   * Gets the number of transactions procesed for a given Tx Epoch.\n   *\n   * @param {number} epoch\n   * @returns {Promise<RPCResponse<number, never>>}\n   */\n  getNumTxnsTxEpoch(epoch: number): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxnsTxEpoch, epoch);\n  }\n\n  /**\n   * getNumTxnsDSEpoch\n   *\n   * Gets the number of transactions procesed for a given DS Epoch.\n   *\n   * @param {number} epoch\n   * @returns {Promise<any>}\n   */\n  getNumTxnsDSEpoch(epoch: number): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxnsDSEpoch, epoch);\n  }\n\n  /**\n   * getMinimumGasPrice\n   *\n   * Gets the numeric minimum gas price\n   *\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getMinimumGasPrice() {\n    return this.provider.send<string, string>(RPCMethod.GetMinimumGasPrice);\n  }\n\n  /**\n   * getBalance\n   *\n   * Gets the balance of an account by address\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n  getBalance(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetBalance,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractCode - returns the smart contract code of a deployed contract.\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<{code: string }, string>>}\n   */\n  getSmartContractCode(\n    addr: string,\n  ): Promise<RPCResponse<{ code: string }, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractCode,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractInit\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<Value[], string>>}\n   */\n  getSmartContractInit(addr: string): Promise<RPCResponse<Value[], string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractInit,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractState - retrieves the entire state of a smart contract\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n  getSmartContractState(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractState,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getSmartContractSubState - Queries the contract state, filtered by the variable names.\n   * This function is the filtered version of `getSmartContractState`.\n   * As `getSubState` performs the filtering, `variableName` of a field is required.\n   * If the `subState` is not found, this returns a `null` response.\n   *\n   * @param {string} address\n   * @param { string } variableName - variable name within the state\n   * @param { string[] } indices - (optional) If the variable is of map type, you can specify an index (or indices)\n   * @returns {Promise<RPCResponse<any, string>>}\n   */\n\n  getSmartContractSubState(\n    addr: string,\n    variableName: string,\n    indices?: string[],\n  ): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    if (!variableName) {\n      throw new Error('Variable name required');\n    }\n\n    return this.provider.send(\n      RPCMethod.GetSmartContractSubState,\n      address.replace('0x', '').toLowerCase(),\n      variableName,\n      indices === undefined ? [] : indices,\n    );\n  }\n\n  /**\n   * getSmartContractSubStateBatch - Quires the contract state using batch rpc.\n   * @param reqs array of address variableName indices\n   *  e.g [\"5938fc8af82250ad6cf1da3bb92f4aa005cb2717\",\"balances\",['0x381f4008505e940ad7681ec3468a719060caf796']]\n   * @returns \n   */\n  getSmartContractSubStateBatch(\n    reqs: any[]\n  ): Promise<RPCResponse<any, any>>{\n    return this.provider.sendBatch(\n      RPCMethod.GetSmartContractSubState,\n      reqs,\n    );\n  }\n\n  /**\n   * getSmartContracts\n   *\n   * @param {string} address\n   * @returns {Promise<RPCResponse<ContractObj[], string>>}\n   */\n  getSmartContracts(addr: string): Promise<RPCResponse<ContractObj[], string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContracts,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  /**\n   * getContractAddressFromTransactionID\n   *\n   * @param {string} txHash\n   * @returns {Promise<RPCResponse<string, string>>}\n   */\n  getContractAddressFromTransactionID(\n    txHash: string,\n  ): Promise<RPCResponse<string, string>> {\n    return this.provider.send(\n      RPCMethod.GetContractAddressFromTransactionID,\n      txHash,\n    );\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Provider, ZilliqaModule } from '@zilliqa-js/core';\nimport { Wallet } from '@zilliqa-js/account';\n\nconst enum NetworkMethods {\n  GetClientVersion = 'GetClientVersion',\n  GetNetworkId = 'GetNetworkId',\n  GetProtocolVersion = 'GetProtocolVersion',\n}\n\nexport class Network implements ZilliqaModule {\n  provider: Provider;\n  signer: Wallet;\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.signer = signer;\n  }\n\n  getClientVersion(): Promise<any> {\n    return this.provider.send(NetworkMethods.GetClientVersion);\n  }\n\n  GetNetworkId(): Promise<any> {\n    return this.provider.send(NetworkMethods.GetNetworkId);\n  }\n\n  GetProtocolVersion(blockNum: number): Promise<any> {\n    return this.provider.send(NetworkMethods.GetProtocolVersion);\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nexport { Blockchain } from './chain';\nexport { Network } from './network';\n"],"names":[],"mappings":"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"}