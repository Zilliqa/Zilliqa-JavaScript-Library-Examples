export declare enum Errors {
    UNKNOWN_ERROR = "UNKNOWN_ERROR",
    NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
    MISSING_NEW = "MISSING_NEW",
    CALL_EXCEPTION = "CALL_EXCEPTION",
    TIMED_OUT = "TIMED_OUT",
    INVALID_ARGUMENT = "INVALID_ARGUMENT",
    MISSING_ARGUMENT = "MISSING_ARGUMENT",
    UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT",
    NUMERIC_FAULT = "NUMERIC_FAULT",
    INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS",
    NONCE_EXPIRED = "NONCE_EXPIRED",
    REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED",
    UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION"
}
/**
 * ZjsError
 *
 * Custom error for use with ZJS modules.
 *
 * @extends {Error}
 */
export declare class ZjsError extends Error {
    reason: string;
    code: Errors;
    params: {
        [key: string]: string;
    };
    constructor(message: string, reason: string, code: Errors, params?: {
        [key: string]: string;
    });
}
/**
 * createError
 *
 * Creates a custom ZjsError.
 *
 * This code is adapted from https://github.com/ethers-io/ethers.js/blob/fa68385cfefdc725b4233083e5ba681b8319d78a/src.ts/errors.ts
 *
 * @param {string} reason
 * @param {string} code
 * @param {any} params
 *
 * @returns {ZjsError}
 */
export declare const createError: (reason: string, code?: Errors, params?: any) => ZjsError;
//# sourceMappingURL=errors.d.ts.map