(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@zilliqa-js/account'), require('@zilliqa-js/core'), require('@zilliqa-js/crypto'), require('@zilliqa-js/util'), require('hash.js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@zilliqa-js/account', '@zilliqa-js/core', '@zilliqa-js/crypto', '@zilliqa-js/util', 'hash.js'], factory) :
    (factory((global.zjsContract = {}),global['@zilliqa-js/account'],global['@zilliqa-js/core'],global['@zilliqa-js/crypto'],global['@zilliqa-js/util'],global.hash.js));
}(this, (function (exports,account,core,crypto,util,hash) { 'use strict';

    hash = hash && hash.hasOwnProperty('default') ? hash['default'] : hash;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    //  Copyright (C) 2018 Zilliqa
    (function (ContractStatus) {
        ContractStatus[ContractStatus["Deployed"] = 0] = "Deployed";
        ContractStatus[ContractStatus["Rejected"] = 1] = "Rejected";
        ContractStatus[ContractStatus["Initialised"] = 2] = "Initialised";
    })(exports.ContractStatus || (exports.ContractStatus = {}));

    //  Copyright (C) 2018 Zilliqa
    var NIL_ADDRESS = '0x0000000000000000000000000000000000000000';
    var Contract = /** @class */ (function () {
        function Contract(factory, code, abi, address, init, state, checkAddr) {
            if (checkAddr === void 0) { checkAddr = false; }
            this.factory = factory;
            this.provider = factory.provider;
            this.signer = factory.signer;
            // assume that we are accessing an existing contract
            if (address) {
                this.abi = abi;
                if (checkAddr) {
                    this.address = crypto.normaliseAddress(address);
                }
                else {
                    if (util.validation.isBech32(address)) {
                        this.address = crypto.fromBech32Address(address);
                    }
                    else if (crypto.isValidChecksumAddress(address)) {
                        this.address = address;
                    }
                    else {
                        this.address = crypto.toChecksumAddress(address);
                    }
                }
                this.init = init;
                this.state = state;
                this.status = exports.ContractStatus.Deployed;
            }
            else {
                // assume we're deploying
                this.abi = abi;
                this.code = code;
                this.init = init;
                this.status = exports.ContractStatus.Initialised;
            }
        }
        /**
         * isInitialised
         *
         * Returns true if the contract has not been deployed
         *
         * @returns {boolean}
         */
        Contract.prototype.isInitialised = function () {
            return this.status === exports.ContractStatus.Initialised;
        };
        /**
         * isDeployed
         *
         * Returns true if the contract is deployed
         *
         * @returns {boolean}
         */
        Contract.prototype.isDeployed = function () {
            return this.status === exports.ContractStatus.Deployed;
        };
        /**
         * isRejected
         *
         * Returns true if an attempt to deploy the contract was made, but the
         * underlying transaction was unsuccessful.
         *
         * @returns {boolean}
         */
        Contract.prototype.isRejected = function () {
            return this.status === exports.ContractStatus.Rejected;
        };
        Contract.prototype.prepareTx = function (tx, attempts, interval, isDeploy) {
            if (attempts === void 0) { attempts = core.GET_TX_ATTEMPTS; }
            if (interval === void 0) { interval = 1000; }
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.provider.send(core.RPCMethod.CreateTransaction, __assign(__assign({}, tx.txParams), { priority: tx.toDS }))];
                        case 1:
                            response = _a.sent();
                            if (response.error) {
                                this.address = undefined;
                                this.error = response.error;
                                return [2 /*return*/, tx.setStatus(account.TxStatus.Rejected)];
                            }
                            if (isDeploy) {
                                this.address = response.result.ContractAddress
                                    ? crypto.toChecksumAddress(response.result.ContractAddress)
                                    : undefined;
                            }
                            return [2 /*return*/, tx.confirm(response.result.TranID, attempts, interval)];
                    }
                });
            });
        };
        Contract.prototype.prepare = function (tx) {
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.provider.send(core.RPCMethod.CreateTransaction, __assign(__assign({}, tx.txParams), { priority: tx.toDS }))];
                        case 1:
                            response = _a.sent();
                            if (response.error || !response.result) {
                                this.address = undefined;
                                this.error = response.error;
                                tx.setStatus(account.TxStatus.Rejected);
                            }
                            else {
                                tx.id = response.result.TranID;
                                tx.setStatus(account.TxStatus.Pending);
                                return [2 /*return*/, response.result.ContractAddress];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * deploy smart contract with no confirm
         * @param params
         * @param toDs
         */
        Contract.prototype.deployWithoutConfirm = function (params, toDs) {
            if (toDs === void 0) { toDs = false; }
            return __awaiter(this, void 0, void 0, function () {
                var tx, _a, err_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.code || !this.init) {
                                throw new Error('Cannot deploy without code or initialisation parameters.');
                            }
                            tx = new account.Transaction(__assign(__assign({}, params), { toAddr: NIL_ADDRESS, amount: new util.BN(0), code: this.code, data: JSON.stringify(this.init).replace(/\\"/g, '"') }), this.provider, account.TxStatus.Initialised, toDs);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.prepare(tx)];
                        case 2:
                            _a.address = _b.sent();
                            this.status =
                                this.address === undefined
                                    ? exports.ContractStatus.Rejected
                                    : exports.ContractStatus.Initialised;
                            return [2 /*return*/, [tx, this]];
                        case 3:
                            err_1 = _b.sent();
                            throw err_1;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * deploy
         *
         * @param {DeployParams} params
         * @returns {Promise<Contract>}
         */
        Contract.prototype.deploy = function (params, attempts, interval, toDs) {
            if (attempts === void 0) { attempts = 33; }
            if (interval === void 0) { interval = 1000; }
            if (toDs === void 0) { toDs = false; }
            return __awaiter(this, void 0, void 0, function () {
                var tx, err_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.code || !this.init) {
                                throw new Error('Cannot deploy without code or initialisation parameters.');
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.prepareTx(new account.Transaction(__assign(__assign({}, params), { toAddr: NIL_ADDRESS, amount: new util.BN(0), code: this.code, data: JSON.stringify(this.init).replace(/\\"/g, '"') }), this.provider, account.TxStatus.Initialised, toDs), attempts, interval, true)];
                        case 2:
                            tx = _a.sent();
                            if (tx.isRejected()) {
                                this.status = exports.ContractStatus.Rejected;
                                this.address = undefined;
                                return [2 /*return*/, [tx, this]];
                            }
                            this.status = exports.ContractStatus.Deployed;
                            this.address =
                                this.address && crypto.isValidChecksumAddress(this.address)
                                    ? this.address
                                    : Contracts.getAddressForContract(tx);
                            return [2 /*return*/, [tx, this]];
                        case 3:
                            err_2 = _a.sent();
                            throw err_2;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        Contract.prototype.callWithoutConfirm = function (transition, args, params, toDs) {
            if (toDs === void 0) { toDs = false; }
            return __awaiter(this, void 0, void 0, function () {
                var data, tx, err_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = {
                                _tag: transition,
                                params: args,
                            };
                            if (this.error) {
                                return [2 /*return*/, Promise.reject(this.error)];
                            }
                            if (!this.address) {
                                return [2 /*return*/, Promise.reject('Contract has not been deployed!')];
                            }
                            tx = new account.Transaction(__assign(__assign({}, params), { toAddr: this.address, data: JSON.stringify(data) }), this.provider, account.TxStatus.Initialised, toDs);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.prepare(tx)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, tx];
                        case 3:
                            err_3 = _a.sent();
                            throw err_3;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * call
         *
         * @param {string} transition
         * @param {any} params
         * @returns {Promise<Transaction>}
         */
        Contract.prototype.call = function (transition, args, params, attempts, interval, toDs) {
            if (attempts === void 0) { attempts = 33; }
            if (interval === void 0) { interval = 1000; }
            if (toDs === void 0) { toDs = false; }
            return __awaiter(this, void 0, void 0, function () {
                var data, err_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = {
                                _tag: transition,
                                params: args,
                            };
                            if (this.error) {
                                return [2 /*return*/, Promise.reject(this.error)];
                            }
                            if (!this.address) {
                                return [2 /*return*/, Promise.reject('Contract has not been deployed!')];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.prepareTx(new account.Transaction(__assign(__assign({}, params), { toAddr: this.address, data: JSON.stringify(data) }), this.provider, account.TxStatus.Initialised, toDs), attempts, interval, false)];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3:
                            err_4 = _a.sent();
                            throw err_4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        // FIXME: Link to @zilliqa-js/blockchain package (reuse code)
        Contract.prototype.getState = function () {
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.status !== exports.ContractStatus.Deployed) {
                                return [2 /*return*/, Promise.resolve([])];
                            }
                            if (!this.address) {
                                throw new Error('Cannot get state of uninitialised contract');
                            }
                            return [4 /*yield*/, this.provider.send(core.RPCMethod.GetSmartContractState, this.address.replace('0x', '').toLowerCase())];
                        case 1:
                            response = _a.sent();
                            return [2 /*return*/, response.result];
                    }
                });
            });
        };
        // FIXME: Link to @zilliqa-js/blockchain package (reuse code)
        /**
         * getSubState
         *
         * @param { string } variableName - variable name within the state
         * @param { string[] } indices -  (optional) If the variable is of map type, you can specify an index (or indices)
         * @returns {Promise<RPCResponse<any, string>>}
         */
        Contract.prototype.getSubState = function (variableName, indices) {
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.status !== exports.ContractStatus.Deployed) {
                                return [2 /*return*/, Promise.resolve([])];
                            }
                            if (!this.address) {
                                throw new Error('Cannot get state of uninitialised contract');
                            }
                            if (!variableName) {
                                throw new Error('Variable name required');
                            }
                            return [4 /*yield*/, this.provider.send(core.RPCMethod.GetSmartContractSubState, this.address.replace('0x', '').toLowerCase(), variableName, indices === undefined ? [] : indices)];
                        case 1:
                            response = _a.sent();
                            return [2 /*return*/, response.result];
                    }
                });
            });
        };
        // FIXME: Link to @zilliqa-js/blockchain package (reuse code)
        Contract.prototype.getInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.status !== exports.ContractStatus.Deployed) {
                                return [2 /*return*/, Promise.resolve([])];
                            }
                            if (!this.address) {
                                throw new Error('Cannot get state of uninitialised contract');
                            }
                            return [4 /*yield*/, this.provider.send(core.RPCMethod.GetSmartContractInit, this.address.replace('0x', '').toLowerCase())];
                        case 1:
                            response = _a.sent();
                            return [2 /*return*/, response.result];
                    }
                });
            });
        };
        __decorate([
            core.sign,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [account.Transaction, Number, Number, Boolean]),
            __metadata("design:returntype", Promise)
        ], Contract.prototype, "prepareTx", null);
        __decorate([
            core.sign,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [account.Transaction]),
            __metadata("design:returntype", Promise)
        ], Contract.prototype, "prepare", null);
        return Contract;
    }());

    //  Copyright (C) 2018 Zilliqa
    /**
     * Contracts
     *
     * Unlike most zilliqa-js modules, `Contracts` is a factory class.
     * As a result, individual `Contract` instances are instead obtained by
     * calling `Contracts.at` (for an already-deployed contract) and
     * `Contracts.new` (to deploy a new contract).
     */
    var Contracts = /** @class */ (function () {
        function Contracts(provider, signer) {
            this.provider = provider;
            this.provider.middleware.request.use(account.util.formatOutgoingTx, core.RPCMethod.CreateTransaction);
            this.signer = signer;
        }
        /**
         * getAddressForContract
         *
         * @static
         * @param {Transaction} tx - transaction used to create the contract
         * @returns {string} - the contract address
         */
        Contracts.getAddressForContract = function (tx) {
            // always subtract 1 from the tx nonce, as contract addresses are computed
            // based on the nonce in the global state.
            var nonce = tx.txParams.nonce ? tx.txParams.nonce - 1 : 0;
            return crypto.toChecksumAddress(hash
                .sha256()
                .update(tx.senderAddress.replace('0x', '').toLowerCase(), 'hex')
                .update(util.bytes.intToHexArray(nonce, 16).join(''), 'hex')
                .digest('hex')
                .slice(24));
        };
        Contracts.prototype.at = function (address, abi, code, init, state) {
            return new Contract(this, code, abi, address, init, state);
        };
        Contracts.prototype.atBech32 = function (address, abi, code, init, state) {
            return new Contract(this, code, abi, address, init, state, true);
        };
        Contracts.prototype.new = function (code, init, abi) {
            return new Contract(this, code, abi, undefined, init);
        };
        return Contracts;
    }());

    //  Copyright (C) 2018 Zilliqa

    exports.Contracts = Contracts;
    exports.Contract = Contract;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
